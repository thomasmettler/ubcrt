////////////////////////////////////////////////////////////////////////
// Class:       POTcount
// Module Type: analyzer
// File:        POTcount_module.cc
//
// Generated at Mon Nov 19 03:49:01 2018 by Thomas Mettler using artmod
// from cetpkgsupport v1_14_01.
////////////////////////////////////////////////////////////////////////

#include "art/Framework/Core/EDAnalyzer.h"
#include "art/Framework/Core/ModuleMacros.h"
#include "art/Framework/Principal/Event.h"
#include "art/Framework/Principal/Handle.h"
#include "art/Framework/Principal/Run.h"
#include "art/Framework/Principal/SubRun.h"
//#include "art/Utilities/InputTag.h"
#include "fhiclcpp/ParameterSet.h"
#include "messagefacility/MessageLogger/MessageLogger.h"

#include "art/Framework/Services/Optional/TFileService.h"
#include "larcoreobj/SummaryData/POTSummary.h"
/*#include "ubobj/CRT/CRTHit.hh"
#include "ubobj/CRT/CRTTrack.hh"
#include "ubcrt/CRT/CRTAuxFunctions.hh"
#include "ubobj/RawData/DAQHeaderTimeUBooNE.h"
*/
// data-products
/*#include "lardataobj/RecoBase/Track.h"                                                                
#include "lardataobj/RecoBase/Hit.h"                                                                  
#include "lardataobj/AnalysisBase/T0.h"                                                               
#include "lardataobj/AnalysisBase/CosmicTag.h"                                                        
#include "lardataobj/AnalysisBase/Calorimetry.h"                                                      
#include "lardataobj/MCBase/MCTrack.h"                                                                
#include "lardataobj/RecoBase/OpFlash.h"                                                              
#include "lardata/Utilities/AssociationUtil.h"
#include "lardataobj/RecoBase/PFParticle.h"
#include "lardataobj/RecoBase/Shower.h"


#include "Pandora/PdgTable.h"
*/
#include "TTree.h"

#include "TH1F.h"
#include "TH2F.h"
#include "TH3S.h"
#include "TProfile.h"
#include "TF1.h"
#include "TDatime.h"
#include <iostream>
#include <stdio.h>
#include <sstream>
#include <vector>
#include <map>
#include <utility>
#include <cmath> 
#include <memory>

#define LIGHTSPEED 299792458.0 // m/s
#define MASS_MU 105.6583745 // MeV

//namespace lar_pandora
//{
class POTcount;

class POTcount : public art::EDAnalyzer {
public:
  explicit POTcount(fhicl::ParameterSet const & p);
  // The destructor generated by the compiler is fine for classes
  // without bare pointers or other resource use.

  // Plugins should not be copied or assigned.
  POTcount(POTcount const &) = delete;
  POTcount(POTcount &&) = delete;
  POTcount & operator = (POTcount const &) = delete;
  POTcount & operator = (POTcount &&) = delete;
  
  

  // Required functions.
  void analyze(art::Event const & e) override;
  void endSubRun(art::SubRun const &sr) override;
  // Selected optional functions.
  //void beginJob() override;
  //void endJob() override;
  


private:

  // Declare member data here.
  art::ServiceHandle<art::TFileService> tfs;
  TTree* _sr_tree;
  int _sr_run = -9999;
  int _sr_subrun = -9999;
  double _sr_begintime = -9999;
  double _sr_endtime = -9999;
  double _sr_pot = -9999;
  
  int event_counter = 0;
 
  int verbose_;

  //void initialize_tpandora();
};

POTcount::POTcount(fhicl::ParameterSet const & pset)
  :
  EDAnalyzer(pset)  // ,
 // More initializers here.
  
{
  //m_printOutScores = pset.get<bool>("PrintOutScores",true);
  verbose_ = pset.get<int>("verbose");
  _sr_tree = tfs->make<TTree>("pottree","pottree");
  _sr_tree->Branch("run",                &_sr_run,                "run/I");
  _sr_tree->Branch("subrun",             &_sr_subrun,             "subrun/I");
  _sr_tree->Branch("begintime",          &_sr_begintime,          "begintime/D");
  _sr_tree->Branch("endtime",            &_sr_endtime,            "endtime/D");
  _sr_tree->Branch("pot",                &_sr_pot,                "pot/D");
  _sr_tree->Branch("event_count",        &event_counter,          "event count/I");
}

void POTcount::analyze(art::Event const & evt)
{
  // Implementation of required member function here.
  std::cout << "Run " << evt.run() << ", subrun " << evt.subRun() << std::endl;
  std::cout << "Event number: " << event_counter << std::endl;
  event_counter++;

}

void POTcount::endSubRun(art::SubRun const &sr){
  
  std::cout << "Write POT infos in to tree..." << std::endl;
  _sr_run       = sr.run();
  _sr_subrun    = sr.subRun();
  _sr_begintime = sr.beginTime().value();
  _sr_endtime   = sr.endTime().value();

  art::Handle<sumdata::POTSummary> potsum_h;
  if ( sr . getByLabel ( "generator" , potsum_h ) ) {
    _sr_pot = potsum_h->totpot;
    //std::cout << "Got POT info" << std::endl;
  }
  _sr_tree->Fill();
  
}

DEFINE_ART_MODULE(POTcount)
